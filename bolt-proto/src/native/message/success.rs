use crate::bolt::Message;
use crate::bolt::Value;
use crate::error::*;
use bolt_proto_derive::*;
use std::collections::HashMap;
use std::convert::TryFrom;

pub(crate) const MARKER: u8 = 0xB1;
pub(crate) const SIGNATURE: u8 = 0x70;

#[derive(Debug, Clone, Signature, Marker, Serialize, Deserialize)]
pub struct Success {
    pub(crate) metadata: HashMap<String, Value>,
}

impl Success {
    pub fn new(metadata: HashMap<String, Value>) -> Self {
        Self { metadata }
    }

    pub fn metadata(&self) -> &HashMap<String, Value> {
        &self.metadata
    }
}

impl TryFrom<Message> for Success {
    type Error = Error;

    fn try_from(message: Message) -> Result<Self> {
        match message {
            Message::Success(success) => Ok(Success::try_from(success)?),
            _ => Err(MessageError::InvalidConversion(message).into()),
        }
    }
}

#[cfg(test)]
mod tests {
    use std::convert::TryFrom;
    use std::sync::{Arc, Mutex};

    use bytes::Bytes;

    use super::*;

    #[test]
    fn try_from_bytes() {
        let bytes = Bytes::from_static(&[
            0xA4, 0x84, 0x74, 0x79, 0x70, 0x65, 0x81, 0x72, 0xD0, 0x15, 0x72, 0x65, 0x73, 0x75,
            0x6C, 0x74, 0x5F, 0x63, 0x6F, 0x6E, 0x73, 0x75, 0x6D, 0x65, 0x64, 0x5F, 0x61, 0x66,
            0x74, 0x65, 0x72, 0x0C, 0x84, 0x70, 0x6C, 0x61, 0x6E, 0xA4, 0x84, 0x61, 0x72, 0x67,
            0x73, 0xA7, 0x8C, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2D, 0x69, 0x6D, 0x70,
            0x6C, 0x8B, 0x49, 0x4E, 0x54, 0x45, 0x52, 0x50, 0x52, 0x45, 0x54, 0x45, 0x44, 0x8C,
            0x70, 0x6C, 0x61, 0x6E, 0x6E, 0x65, 0x72, 0x2D, 0x69, 0x6D, 0x70, 0x6C, 0x83, 0x49,
            0x44, 0x50, 0x87, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x8A, 0x43, 0x59, 0x50,
            0x48, 0x45, 0x52, 0x20, 0x33, 0x2E, 0x31, 0x88, 0x4B, 0x65, 0x79, 0x4E, 0x61, 0x6D,
            0x65, 0x73, 0x84, 0x6E, 0x2C, 0x20, 0x6D, 0x8D, 0x45, 0x73, 0x74, 0x69, 0x6D, 0x61,
            0x74, 0x65, 0x64, 0x52, 0x6F, 0x77, 0x73, 0xC1, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x87, 0x70, 0x6C, 0x61, 0x6E, 0x6E, 0x65, 0x72, 0x84, 0x43, 0x4F, 0x53,
            0x54, 0x87, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x8B, 0x49, 0x4E, 0x54, 0x45,
            0x52, 0x50, 0x52, 0x45, 0x54, 0x45, 0x44, 0x88, 0x63, 0x68, 0x69, 0x6C, 0x64, 0x72,
            0x65, 0x6E, 0x91, 0xA4, 0x84, 0x61, 0x72, 0x67, 0x73, 0xA1, 0x8D, 0x45, 0x73, 0x74,
            0x69, 0x6D, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6F, 0x77, 0x73, 0xC1, 0x3F, 0xF0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x63, 0x68, 0x69, 0x6C, 0x64, 0x72, 0x65, 0x6E,
            0x92, 0xA4, 0x84, 0x61, 0x72, 0x67, 0x73, 0xA1, 0x8D, 0x45, 0x73, 0x74, 0x69, 0x6D,
            0x61, 0x74, 0x65, 0x64, 0x52, 0x6F, 0x77, 0x73, 0xC1, 0x3F, 0xF0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x88, 0x63, 0x68, 0x69, 0x6C, 0x64, 0x72, 0x65, 0x6E, 0x90, 0x8B,
            0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x91, 0x81, 0x6E,
            0x8C, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x54, 0x79, 0x70, 0x65, 0x8C,
            0x41, 0x6C, 0x6C, 0x4E, 0x6F, 0x64, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6E, 0xA4, 0x84,
            0x61, 0x72, 0x67, 0x73, 0xA1, 0x8D, 0x45, 0x73, 0x74, 0x69, 0x6D, 0x61, 0x74, 0x65,
            0x64, 0x52, 0x6F, 0x77, 0x73, 0xC1, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x88, 0x63, 0x68, 0x69, 0x6C, 0x64, 0x72, 0x65, 0x6E, 0x90, 0x8B, 0x69, 0x64, 0x65,
            0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x91, 0x81, 0x6D, 0x8C, 0x6F, 0x70,
            0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x54, 0x79, 0x70, 0x65, 0x8C, 0x41, 0x6C, 0x6C,
            0x4E, 0x6F, 0x64, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6E, 0x8B, 0x69, 0x64, 0x65, 0x6E,
            0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x92, 0x81, 0x6D, 0x81, 0x6E, 0x8C, 0x6F,
            0x70, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x54, 0x79, 0x70, 0x65, 0xD0, 0x10, 0x43,
            0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6E, 0x50, 0x72, 0x6F, 0x64, 0x75, 0x63,
            0x74, 0x8B, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x92,
            0x81, 0x6D, 0x81, 0x6E, 0x8C, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x54,
            0x79, 0x70, 0x65, 0x8E, 0x50, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73,
            0x75, 0x6C, 0x74, 0x73, 0x8D, 0x6E, 0x6F, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
            0x69, 0x6F, 0x6E, 0x73, 0x91, 0xA5, 0x88, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
            0x79, 0x87, 0x57, 0x41, 0x52, 0x4E, 0x49, 0x4E, 0x47, 0x85, 0x74, 0x69, 0x74, 0x6C,
            0x65, 0xD0, 0x44, 0x54, 0x68, 0x69, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
            0x62, 0x75, 0x69, 0x6C, 0x64, 0x73, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x74, 0x65,
            0x73, 0x69, 0x61, 0x6E, 0x20, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x20, 0x62,
            0x65, 0x74, 0x77, 0x65, 0x65, 0x6E, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6F, 0x6E, 0x6E,
            0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6E, 0x73,
            0x2E, 0x84, 0x63, 0x6F, 0x64, 0x65, 0xD0, 0x38, 0x4E, 0x65, 0x6F, 0x2E, 0x43, 0x6C,
            0x69, 0x65, 0x6E, 0x74, 0x4E, 0x6F, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
            0x6F, 0x6E, 0x2E, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x43,
            0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6E, 0x50, 0x72, 0x6F, 0x64, 0x75, 0x63,
            0x74, 0x57, 0x61, 0x72, 0x6E, 0x69, 0x6E, 0x67, 0x8B, 0x64, 0x65, 0x73, 0x63, 0x72,
            0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0xD1, 0x01, 0xA9, 0x49, 0x66, 0x20, 0x61, 0x20,
            0x70, 0x61, 0x72, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x20, 0x71, 0x75, 0x65, 0x72,
            0x79, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x73, 0x20, 0x6D, 0x75, 0x6C,
            0x74, 0x69, 0x70, 0x6C, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6F, 0x6E, 0x6E, 0x65,
            0x63, 0x74, 0x65, 0x64, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6E, 0x73, 0x2C,
            0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x62, 0x75, 0x69,
            0x6C, 0x64, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6E,
            0x20, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
            0x65, 0x6E, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x6F, 0x73, 0x65, 0x20, 0x70,
            0x61, 0x72, 0x74, 0x73, 0x2E, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6D, 0x61, 0x79,
            0x20, 0x70, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x65, 0x20, 0x61, 0x20, 0x6C, 0x61, 0x72,
            0x67, 0x65, 0x20, 0x61, 0x6D, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x64,
            0x61, 0x74, 0x61, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x6C, 0x6F, 0x77, 0x20, 0x64,
            0x6F, 0x77, 0x6E, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x72, 0x6F, 0x63,
            0x65, 0x73, 0x73, 0x69, 0x6E, 0x67, 0x2E, 0x20, 0x57, 0x68, 0x69, 0x6C, 0x65, 0x20,
            0x6F, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x6C, 0x79, 0x20, 0x69,
            0x6E, 0x74, 0x65, 0x6E, 0x64, 0x65, 0x64, 0x2C, 0x20, 0x69, 0x74, 0x20, 0x6D, 0x61,
            0x79, 0x20, 0x6F, 0x66, 0x74, 0x65, 0x6E, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6F, 0x73,
            0x73, 0x69, 0x62, 0x6C, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x66, 0x6F, 0x72,
            0x6D, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65,
            0x72, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x76, 0x6F, 0x69, 0x64, 0x73,
            0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68,
            0x69, 0x73, 0x20, 0x63, 0x72, 0x6F, 0x73, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x64, 0x75,
            0x63, 0x74, 0x2C, 0x20, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x20, 0x62, 0x79,
            0x20, 0x61, 0x64, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x72, 0x65, 0x6C, 0x61,
            0x74, 0x69, 0x6F, 0x6E, 0x73, 0x68, 0x69, 0x70, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
            0x65, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
            0x6E, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x73, 0x20, 0x6F, 0x72, 0x20, 0x62, 0x79,
            0x20, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x4F, 0x50, 0x54, 0x49, 0x4F, 0x4E, 0x41,
            0x4C, 0x20, 0x4D, 0x41, 0x54, 0x43, 0x48, 0x20, 0x28, 0x69, 0x64, 0x65, 0x6E, 0x74,
            0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x73, 0x3A, 0x20, 0x28, 0x6D, 0x29, 0x29,
            0x88, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0xA3, 0x86, 0x6F, 0x66, 0x66,
            0x73, 0x65, 0x74, 0x00, 0x86, 0x63, 0x6F, 0x6C, 0x75, 0x6D, 0x6E, 0x01, 0x84, 0x6C,
            0x69, 0x6E, 0x65, 0x01,
        ]);
        let success = Success::try_from(Arc::new(Mutex::new(bytes)));
        assert!(success.is_ok());
    }
}
